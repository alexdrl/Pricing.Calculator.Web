@page "/rulesets"
@using Microsoft.Net.Http.Headers
@using Pricing.Calculator.Web.App.ApiClients.CalculatorClient.Models
@using Pricing.Calculator.Web.App.Services
@inject IRuleSetService RuleSetService
@inject IPreviewCalculationService PreviewCalculationService

@using Pricing.Calculator.Web.App.Models.Request
@using Pricing.Calculator.Web.App.Models
@using Pricing.Calculator.Web.App.Models.Request.Forward
@using Pricing.Calculator.Web.App.Models.Request.Preview
@using Pricing.Calculator.Web.App.Models.Response
@using System.Threading

<div class="row">
    <div class="col-3">
        <label class="form-label">Select Ruleset:</label>
        <EditForm Model="@ActiveRulesets">
            <InputSelect @bind-Value="CurrentRulesetId" class="form-control">
                @foreach (var value in ActiveRulesets)
                {
                    <option value="@value.RulesetId">@value.RulesetId</option>
                }
            </InputSelect>
        </EditForm>
    </div>
</div>

<hr />

<div class="row">
    <div class="col">
        <EditForm Model="@ruleset" OnValidSubmit="@Publish">

            <ObjectGraphDataAnnotationsValidator />

            <div hidden="@Ishidden">
                <h4 class="mb-3 border-bottom">Main Attributes</h4>

                <div class="card mb-3">
                    <div class="card-body">
                        <div class="row">
                            <div class="col">
                                <div class="form-group">
                                    <label>Source Country</label>
                                    <InputText @bind-Value="ruleset.SourceCountry" class="form-control" />
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-group">
                                    <label>Declaration Country</label>
                                    <InputText @bind-Value="ruleset.DeclarationCountry" class="form-control" />
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-group">
                                    <label>Brand Code</label>
                                    <InputText @bind-Value="ruleset.BrandCode" class="form-control" />
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-group">
                                    <label>Postal Method</label>
                                    <InputText @bind-Value="ruleset.PostalMethod" class="form-control" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <h4 class="mb-3 border-bottom">Charge Configurations</h4>
                <button class="btn btn-danger pt-0 pb-0 ml-2" type="button" @onclick="AddNewChargeConfig"><span class="oi oi-plus"></span></button>

                @foreach (var chargeConf in ruleset.ChargeConfigurations)
                {

                    <ChargeConfigurationComponent ChargeConfiguration="@chargeConf" OnClickDelete="@OnClickDelete" />

                }

                <hr />
                <div class="mb-3">
                    <button class="btn btn-info" type="button" @onclick="Preview">@previewButtonText</button>
                    <button class="btn btn-primary" type="button" @onclick="Publish">Publish Changes</button>
                </div>
            </div>

        </EditForm>
    </div>
</div>

<hr />

<div class="row" hidden="@hidePreview">
    <div class="col">

        <EditForm Model="@order">

            <ObjectGraphDataAnnotationsValidator />

            <div class="card-header d-flex align-items-center justify-content-between text-white bg-secondary">
                Items
                <button class="btn btn-outline-light float-right pt-0 pb-0" type="button" @onclick="@AddItem">+</button>
            </div>

            <div class="card-body">

                @foreach (var item in order.Items)
                {
                    <ItemFormComponent Item="@item" DeleteItem="@(() => DeleteItem(item))" />
                }

                <ValidationMessage For=@(() => order.Items) style="margin-bottom:20px" />

                <button type="submit" class="btn btn-primary" @onclick="Calculate">Calculate</button>

                <CalculatedChargesComponent Calculation="@productionCalculation" Status="@status" CardTitle="Live Ruleset Charges" />
                <CalculatedChargesComponent Calculation="@previewCalculation" Status="@status" CardTitle="Modified Ruleset Charges" />

            </div>
        </EditForm>
    </div>
</div>

@code {

    private string? status = "Waiting...";
    private string _currentRulesetId = string.Empty;
    private bool Ishidden = true;
    private bool hidePreview = true;
    private string previewButtonText = "Test Calculation";

    public Ruleset ruleset { get; set; } = new Ruleset();
    public Models.Request.Forward.Order order { get; set; } = new Models.Request.Forward.Order();

    private Calculation? productionCalculation;
    private Calculation? previewCalculation;

    public string CurrentRulesetId
    {
        get { return _currentRulesetId; }
        set
        {
            _currentRulesetId = value;

            if (string.IsNullOrWhiteSpace(value))
            {
                Ishidden = true;
                return;
            }

            Ishidden = false;

            if (value == "DC:IE-SC:GB") // Goto API to retrieve
            {
                ruleset = RuleSetService.GetRuleSet(value);
            }
            else
            {
                ruleset = ActiveRulesets.FirstOrDefault(x => x.RulesetId == value);
            }
        }
    }

    public List<Ruleset> ActiveRulesets { get; set; } = new()
    {
        new Ruleset { SourceCountry = "GB", DeclarationCountry = "IE" },
        new Ruleset { SourceCountry = "ES", DeclarationCountry = "FR" },
        new Ruleset() { SourceCountry = "GB", DeclarationCountry = "NL" }
    };


    private void AddNewChargeConfig()
    {
        ruleset.ChargeConfigurations.Add(new Models.Request.ChargeConfiguration());
    }

    private void Publish()
    {
    }

    private async Task Calculate()
    {
        order.DeclarationCountryIso = ruleset.DeclarationCountry;
        order.SourceCountryIso = ruleset.SourceCountry;
        var request = new PreviewRequest() { CalculationDto = order, RulesetDto = Ruleset.ToRuleSetRequestDto(ruleset, new List<string>() { "Item", "Delivery" }) };
        var result = await this.PreviewCalculationService.Calculate(request, CancellationToken.None);
        productionCalculation = (result as OperationResult<PreviewResponse>).Data.ProductionCalculation;
        previewCalculation = (result as OperationResult<PreviewResponse>).Data.PreviewCalculation;
    }

    private async Task Preview()
    {
        hidePreview = !hidePreview;
        TogglePreviewText();
    }

    private void TogglePreviewText()
    {
        if (hidePreview) previewButtonText = "Test Calculation";
        else previewButtonText = "Hide Calculation";
    }

    private void OnClickDelete(ChargeConfiguration chargeConfiguration)
    {
        ruleset.ChargeConfigurations.Remove(chargeConfiguration);
    }

    private void AddItem()
    {
        order.Items.Add(new Models.Request.Item());
    }

    private void DeleteItem(Models.Request.Item item)
    {
        order.Items.Remove(item);
        StateHasChanged();
    }

}