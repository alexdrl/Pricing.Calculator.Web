@page "/rulesets"

@using Pricing.Calculator.Web.App.Models.Request
@using Pricing.Calculator.Web.App.Models
@using Pricing.Calculator.Web.App.Models.Request.Forward
@using Pricing.Calculator.Web.App.Models.Response

<div class="row">
    <div class="col-3">
        <label class="form-label">Select Ruleset:</label>
        <EditForm Model="@ActiveRulesets">
            <InputSelect @bind-Value="CurrentRulesetId" class="form-control">
                @foreach (var value in ActiveRulesets)
                {
                    <option value="@value.RulesetId">@value.RulesetId</option>
                }
            </InputSelect>
        </EditForm>
    </div>
</div>

<hr />

<div class="row">
    <div class="col">
        <EditForm Model="@ruleset" OnValidSubmit="@Publish">

            <ObjectGraphDataAnnotationsValidator />

            <div hidden="@Ishidden">
                <h4 class="mb-3 border-bottom">Main Attributes</h4>

                <div class="card mb-3">
                    <div class="card-body">
                        <div class="row">
                            <div class="col">
                                <div class="form-group">
                                    <label>Source Country</label>
                                    <InputText @bind-Value="ruleset.SourceCountry" class="form-control" />
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-group">
                                    <label>Declaration Country</label>
                                    <InputText @bind-Value="ruleset.DeclarationCountry" class="form-control" />
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-group">
                                    <label>Brand Code</label>
                                    <InputText @bind-Value="ruleset.BrandCode" class="form-control" />
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-group">
                                    <label>Postal Method</label>
                                    <InputText @bind-Value="ruleset.PostalMethod" class="form-control" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <h4 class="mb-3 border-bottom">Charge Configurations</h4>
                <button class="btn btn-danger pt-0 pb-0 ml-2" type="button" @onclick="AddNewChargeConfig"><span class="oi oi-plus"></span></button>

                @foreach (var chargeConf in ruleset.ChargeConfigurations)
                {

                    <ChargeConfigurationComponent ChargeConfiguration="@chargeConf" OnClickDelete="@OnClickDelete" />

                }

                <hr />
                <div class="float-right mb-3">
                    <button class="btn btn-info" type="button" @onclick="Preview">Preview Changes</button>
                    <button class="btn btn-primary" type="button" @onclick="Publish">Publish Changes</button>
                </div>
            </div>

        </EditForm>
    </div>
</div>

<div class="row">
    <EditForm Model="@order">

        <ObjectGraphDataAnnotationsValidator />
        <ForwardOrderFormComponent Order="@order" />
        <CalculatedChargesComponent Calculation="@productionCalculation" Status="@status" CardTitle="Live Ruleset Charges" />
        <CalculatedChargesComponent Calculation="@previewCalculation" Status="@status" CardTitle="Modified Ruleset Charges" />

    </EditForm>
</div>


@code {

    private string? status = "Waiting...";
    private string _currentRulesetId = string.Empty;
    private bool Ishidden = true;

    public Ruleset ruleset { get; set; } = new Ruleset();
    public Models.Request.Forward.Order order { get; set; } = new Models.Request.Forward.Order();

    private Calculation? productionCalculation;
    private Calculation? previewCalculation;

    public string CurrentRulesetId
    {
        get { return _currentRulesetId; }
        set
        {
            if (string.IsNullOrWhiteSpace(value))
                Ishidden = true;
            else
                Ishidden = false;

            _currentRulesetId = value;
            ruleset = ActiveRulesets.FirstOrDefault(x => x.RulesetId == value);
        }
    }

    public List<Ruleset> ActiveRulesets { get; set; } = new()
    {
            new Ruleset { SourceCountry = "GB", DeclarationCountry = "IE" },
            new Ruleset { SourceCountry = "ES", DeclarationCountry = "FR" },
            new Ruleset() { SourceCountry = "GB", DeclarationCountry = "NL" }
        };


    private void AddNewChargeConfig()
    {
        ruleset.ChargeConfigurations.Add(new Models.Request.ChargeConfiguration());
    }

    private void Publish()
    {
    }

    private void Preview()
    {

    }

    private void OnClickDelete(ChargeConfiguration chargeConfiguration)
    {
        ruleset.ChargeConfigurations.Remove(chargeConfiguration);
    }

}