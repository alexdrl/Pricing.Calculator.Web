// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Pricing.Calculator.Web.App.ApiClients.CalculatorClient
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CalculatorApiClient.
    /// </summary>
    public static partial class CalculatorApiClientExtensions
    {
            /// <summary>
            /// Process forward calculation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// A calculation DTO, instance of
            /// Pricing.Calculator.Api.Contracts.V1.Requests.ForwardCalculationDto class.
            /// </param>
            public static void SendForward(this ICalculatorApiClient operations, ForwardCalculationDto body = default(ForwardCalculationDto))
            {
                operations.SendForwardAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Process forward calculation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// A calculation DTO, instance of
            /// Pricing.Calculator.Api.Contracts.V1.Requests.ForwardCalculationDto class.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendForwardAsync(this ICalculatorApiClient operations, ForwardCalculationDto body = default(ForwardCalculationDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendForwardWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Process forward calculation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// A calculation DTO, instance of
            /// Pricing.Calculator.Api.Contracts.V1.Requests.ForwardCalculationDto class.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse SendForwardWithHttpMessages(this ICalculatorApiClient operations, ForwardCalculationDto body = default(ForwardCalculationDto), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.SendForwardWithHttpMessagesAsync(body, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Process reverse calculation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// A calculation DTO, instance of
            /// Pricing.Calculator.Api.Contracts.V1.Requests.ReverseCalculationDto class.
            /// </param>
            public static void SendReverse(this ICalculatorApiClient operations, ReverseCalculationDto body = default(ReverseCalculationDto))
            {
                operations.SendReverseAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Process reverse calculation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// A calculation DTO, instance of
            /// Pricing.Calculator.Api.Contracts.V1.Requests.ReverseCalculationDto class.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendReverseAsync(this ICalculatorApiClient operations, ReverseCalculationDto body = default(ReverseCalculationDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendReverseWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Process reverse calculation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// A calculation DTO, instance of
            /// Pricing.Calculator.Api.Contracts.V1.Requests.ReverseCalculationDto class.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse SendReverseWithHttpMessages(this ICalculatorApiClient operations, ReverseCalculationDto body = default(ReverseCalculationDto), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.SendReverseWithHttpMessagesAsync(body, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier.
            /// </param>
            public static string GetCalculations(this ICalculatorApiClient operations, System.Guid id)
            {
                return operations.GetCalculationsAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetCalculationsAsync(this ICalculatorApiClient operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCalculationsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<string> GetCalculationsWithHttpMessages(this ICalculatorApiClient operations, System.Guid id, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetCalculationsWithHttpMessagesAsync(id, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier.
            /// </param>
            public static RulesetResponseDto GetRuleset(this ICalculatorApiClient operations, string id)
            {
                return operations.GetRulesetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RulesetResponseDto> GetRulesetAsync(this ICalculatorApiClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRulesetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier.
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<RulesetResponseDto> GetRulesetWithHttpMessages(this ICalculatorApiClient operations, string id, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetRulesetWithHttpMessagesAsync(id, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a ruleset from the specified data, or updates a matching one from
            /// that data.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static RulesetResponseDto SendRuleset(this ICalculatorApiClient operations, RulesetDto body = default(RulesetDto))
            {
                return operations.SendRulesetAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a ruleset from the specified data, or updates a matching one from
            /// that data.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RulesetResponseDto> SendRulesetAsync(this ICalculatorApiClient operations, RulesetDto body = default(RulesetDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendRulesetWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a ruleset from the specified data, or updates a matching one from
            /// that data.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<RulesetResponseDto> SendRulesetWithHttpMessages(this ICalculatorApiClient operations, RulesetDto body = default(RulesetDto), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.SendRulesetWithHttpMessagesAsync(body, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

    }
}
